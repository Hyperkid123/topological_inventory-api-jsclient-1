/**
 * Topological Inventory
 * Topological Inventory
 *
 * OpenAPI spec version: 0.0.1
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Authentication from '../model/Authentication';
import Container from '../model/Container';
import ContainerGroup from '../model/ContainerGroup';
import ContainerImage from '../model/ContainerImage';
import ContainerNode from '../model/ContainerNode';
import ContainerProject from '../model/ContainerProject';
import ContainerTemplate from '../model/ContainerTemplate';
import Endpoint from '../model/Endpoint';
import Flavor from '../model/Flavor';
import ID from '../model/ID';
import InlineResponse200 from '../model/InlineResponse200';
import OrchestrationStack from '../model/OrchestrationStack';
import OrderParameters from '../model/OrderParameters';
import ServiceInstance from '../model/ServiceInstance';
import ServiceOffering from '../model/ServiceOffering';
import ServicePlan from '../model/ServicePlan';
import Source from '../model/Source';
import SourceType from '../model/SourceType';
import Task from '../model/Task';
import Vm from '../model/Vm';
import Volume from '../model/Volume';
import VolumeAttachment from '../model/VolumeAttachment';
import VolumeType from '../model/VolumeType';

/**
* Default service.
* @module api/DefaultApi
* @version 0.0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new Authentication
     * Creates a Authentication object
     * @param {module:model/ID} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createAuthenticationWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthentication");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/authentications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new Authentication
     * Creates a Authentication object
     * @param {module:model/ID} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createAuthentication(body) {
      return this.createAuthenticationWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Endpoint
     * Creates a Endpoint object
     * @param {module:model/ID} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createEndpointWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createEndpoint");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/endpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new Endpoint
     * Creates a Endpoint object
     * @param {module:model/ID} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createEndpoint(body) {
      return this.createEndpointWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Source
     * Creates a Source object
     * @param {module:model/ID} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createSourceWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSource");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new Source
     * Creates a Source object
     * @param {module:model/ID} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createSource(body) {
      return this.createSourceWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new SourceType
     * Creates a SourceType object
     * @param {module:model/ID} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createSourceTypeWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSourceType");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/source_types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new SourceType
     * Creates a SourceType object
     * @param {module:model/ID} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createSourceType(body) {
      return this.createSourceTypeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing Authentication
     * Deletes a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAuthenticationWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAuthentication");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/authentications/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing Authentication
     * Deletes a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAuthentication(id) {
      return this.deleteAuthenticationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing Endpoint
     * Deletes a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteEndpointWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEndpoint");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing Endpoint
     * Deletes a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteEndpoint(id) {
      return this.deleteEndpointWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing Source
     * Deletes a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSourceWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSource");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/sources/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing Source
     * Deletes a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSource(id) {
      return this.deleteSourceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Authentications
     * Returns an array of Authentication objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Authentication>} and HTTP response
     */
    listAuthenticationsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Authentication];

      return this.apiClient.callApi(
        '/authentications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Authentications
     * Returns an array of Authentication objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Authentication>}
     */
    listAuthentications() {
      return this.listAuthenticationsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Containers for ContainerGroup
     * Returns an array of Container objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Container>} and HTTP response
     */
    listContainerGroupContainersWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listContainerGroupContainers");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Container];

      return this.apiClient.callApi(
        '/container_groups/{id}/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Containers for ContainerGroup
     * Returns an array of Container objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Container>}
     */
    listContainerGroupContainers(id) {
      return this.listContainerGroupContainersWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerGroups
     * Returns an array of ContainerGroup objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerGroup>} and HTTP response
     */
    listContainerGroupsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerGroup];

      return this.apiClient.callApi(
        '/container_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerGroups
     * Returns an array of ContainerGroup objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerGroup>}
     */
    listContainerGroups() {
      return this.listContainerGroupsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerImages
     * Returns an array of ContainerImage objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerImage>} and HTTP response
     */
    listContainerImagesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerImage];

      return this.apiClient.callApi(
        '/container_images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerImages
     * Returns an array of ContainerImage objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerImage>}
     */
    listContainerImages() {
      return this.listContainerImagesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerGroups for ContainerNode
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerGroup>} and HTTP response
     */
    listContainerNodeContainerGroupsWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listContainerNodeContainerGroups");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerGroup];

      return this.apiClient.callApi(
        '/container_nodes/{id}/container_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerGroups for ContainerNode
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerGroup>}
     */
    listContainerNodeContainerGroups(id) {
      return this.listContainerNodeContainerGroupsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerNodes
     * Returns an array of ContainerNode objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerNode>} and HTTP response
     */
    listContainerNodesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerNode];

      return this.apiClient.callApi(
        '/container_nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerNodes
     * Returns an array of ContainerNode objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerNode>}
     */
    listContainerNodes() {
      return this.listContainerNodesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerGroups for ContainerProject
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerGroup>} and HTTP response
     */
    listContainerProjectContainerGroupsWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listContainerProjectContainerGroups");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerGroup];

      return this.apiClient.callApi(
        '/container_projects/{id}/container_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerGroups for ContainerProject
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerGroup>}
     */
    listContainerProjectContainerGroups(id) {
      return this.listContainerProjectContainerGroupsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerTemplates for ContainerProject
     * Returns an array of ContainerTemplate objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerTemplate>} and HTTP response
     */
    listContainerProjectContainerTemplatesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listContainerProjectContainerTemplates");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerTemplate];

      return this.apiClient.callApi(
        '/container_projects/{id}/container_templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerTemplates for ContainerProject
     * Returns an array of ContainerTemplate objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerTemplate>}
     */
    listContainerProjectContainerTemplates(id) {
      return this.listContainerProjectContainerTemplatesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerProjects
     * Returns an array of ContainerProject objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerProject>} and HTTP response
     */
    listContainerProjectsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerProject];

      return this.apiClient.callApi(
        '/container_projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerProjects
     * Returns an array of ContainerProject objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerProject>}
     */
    listContainerProjects() {
      return this.listContainerProjectsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerTemplates
     * Returns an array of ContainerTemplate objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerTemplate>} and HTTP response
     */
    listContainerTemplatesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerTemplate];

      return this.apiClient.callApi(
        '/container_templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerTemplates
     * Returns an array of ContainerTemplate objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerTemplate>}
     */
    listContainerTemplates() {
      return this.listContainerTemplatesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Containers
     * Returns an array of Container objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Container>} and HTTP response
     */
    listContainersWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Container];

      return this.apiClient.callApi(
        '/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Containers
     * Returns an array of Container objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Container>}
     */
    listContainers() {
      return this.listContainersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Endpoints
     * Returns an array of Endpoint objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Endpoint>} and HTTP response
     */
    listEndpointsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Endpoint];

      return this.apiClient.callApi(
        '/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Endpoints
     * Returns an array of Endpoint objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Endpoint>}
     */
    listEndpoints() {
      return this.listEndpointsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Flavors
     * Returns an array of Flavor objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Flavor>} and HTTP response
     */
    listFlavorsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Flavor];

      return this.apiClient.callApi(
        '/flavors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Flavors
     * Returns an array of Flavor objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Flavor>}
     */
    listFlavors() {
      return this.listFlavorsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List OrchestrationStacks
     * Returns an array of OrchestrationStack objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/OrchestrationStack>} and HTTP response
     */
    listOrchestrationStacksWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrchestrationStack];

      return this.apiClient.callApi(
        '/orchestration_stacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List OrchestrationStacks
     * Returns an array of OrchestrationStack objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/OrchestrationStack>}
     */
    listOrchestrationStacks() {
      return this.listOrchestrationStacksWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceInstances
     * Returns an array of ServiceInstance objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServiceInstance>} and HTTP response
     */
    listServiceInstancesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceInstance];

      return this.apiClient.callApi(
        '/service_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceInstances
     * Returns an array of ServiceInstance objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServiceInstance>}
     */
    listServiceInstances() {
      return this.listServiceInstancesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceInstances for ServiceOffering
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServiceInstance>} and HTTP response
     */
    listServiceOfferingServiceInstancesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listServiceOfferingServiceInstances");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceInstance];

      return this.apiClient.callApi(
        '/service_offerings/{id}/service_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceInstances for ServiceOffering
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServiceInstance>}
     */
    listServiceOfferingServiceInstances(id) {
      return this.listServiceOfferingServiceInstancesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServicePlans for ServiceOffering
     * Returns an array of ServicePlan objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServicePlan>} and HTTP response
     */
    listServiceOfferingServicePlansWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listServiceOfferingServicePlans");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServicePlan];

      return this.apiClient.callApi(
        '/service_offerings/{id}/service_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServicePlans for ServiceOffering
     * Returns an array of ServicePlan objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServicePlan>}
     */
    listServiceOfferingServicePlans(id) {
      return this.listServiceOfferingServicePlansWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceOfferings
     * Returns an array of ServiceOffering objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServiceOffering>} and HTTP response
     */
    listServiceOfferingsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceOffering];

      return this.apiClient.callApi(
        '/service_offerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceOfferings
     * Returns an array of ServiceOffering objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServiceOffering>}
     */
    listServiceOfferings() {
      return this.listServiceOfferingsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceInstances for ServicePlan
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServiceInstance>} and HTTP response
     */
    listServicePlanServiceInstancesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listServicePlanServiceInstances");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceInstance];

      return this.apiClient.callApi(
        '/service_plans/{id}/service_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceInstances for ServicePlan
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServiceInstance>}
     */
    listServicePlanServiceInstances(id) {
      return this.listServicePlanServiceInstancesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServicePlans
     * Returns an array of ServicePlan objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServicePlan>} and HTTP response
     */
    listServicePlansWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServicePlan];

      return this.apiClient.callApi(
        '/service_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServicePlans
     * Returns an array of ServicePlan objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServicePlan>}
     */
    listServicePlans() {
      return this.listServicePlansWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerGroups for Source
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerGroup>} and HTTP response
     */
    listSourceContainerGroupsWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainerGroups");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerGroup];

      return this.apiClient.callApi(
        '/sources/{id}/container_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerGroups for Source
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerGroup>}
     */
    listSourceContainerGroups(id) {
      return this.listSourceContainerGroupsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerImages for Source
     * Returns an array of ContainerImage objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerImage>} and HTTP response
     */
    listSourceContainerImagesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainerImages");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerImage];

      return this.apiClient.callApi(
        '/sources/{id}/container_images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerImages for Source
     * Returns an array of ContainerImage objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerImage>}
     */
    listSourceContainerImages(id) {
      return this.listSourceContainerImagesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerNodes for Source
     * Returns an array of ContainerNode objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerNode>} and HTTP response
     */
    listSourceContainerNodesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainerNodes");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerNode];

      return this.apiClient.callApi(
        '/sources/{id}/container_nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerNodes for Source
     * Returns an array of ContainerNode objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerNode>}
     */
    listSourceContainerNodes(id) {
      return this.listSourceContainerNodesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerProjects for Source
     * Returns an array of ContainerProject objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerProject>} and HTTP response
     */
    listSourceContainerProjectsWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainerProjects");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerProject];

      return this.apiClient.callApi(
        '/sources/{id}/container_projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerProjects for Source
     * Returns an array of ContainerProject objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerProject>}
     */
    listSourceContainerProjects(id) {
      return this.listSourceContainerProjectsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerTemplates for Source
     * Returns an array of ContainerTemplate objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContainerTemplate>} and HTTP response
     */
    listSourceContainerTemplatesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainerTemplates");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainerTemplate];

      return this.apiClient.callApi(
        '/sources/{id}/container_templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerTemplates for Source
     * Returns an array of ContainerTemplate objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContainerTemplate>}
     */
    listSourceContainerTemplates(id) {
      return this.listSourceContainerTemplatesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Containers for Source
     * Returns an array of Container objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Container>} and HTTP response
     */
    listSourceContainersWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainers");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Container];

      return this.apiClient.callApi(
        '/sources/{id}/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Containers for Source
     * Returns an array of Container objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Container>}
     */
    listSourceContainers(id) {
      return this.listSourceContainersWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Endpoints for Source
     * Returns an array of Endpoint objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Endpoint>} and HTTP response
     */
    listSourceEndpointsWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceEndpoints");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Endpoint];

      return this.apiClient.callApi(
        '/sources/{id}/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Endpoints for Source
     * Returns an array of Endpoint objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Endpoint>}
     */
    listSourceEndpoints(id) {
      return this.listSourceEndpointsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List OrchestrationStacks for Source
     * Returns an array of OrchestrationStack objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/OrchestrationStack>} and HTTP response
     */
    listSourceOrchestrationStacksWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceOrchestrationStacks");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrchestrationStack];

      return this.apiClient.callApi(
        '/sources/{id}/orchestration_stacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List OrchestrationStacks for Source
     * Returns an array of OrchestrationStack objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/OrchestrationStack>}
     */
    listSourceOrchestrationStacks(id) {
      return this.listSourceOrchestrationStacksWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceInstances for Source
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServiceInstance>} and HTTP response
     */
    listSourceServiceInstancesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceServiceInstances");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceInstance];

      return this.apiClient.callApi(
        '/sources/{id}/service_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceInstances for Source
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServiceInstance>}
     */
    listSourceServiceInstances(id) {
      return this.listSourceServiceInstancesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceOfferings for Source
     * Returns an array of ServiceOffering objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServiceOffering>} and HTTP response
     */
    listSourceServiceOfferingsWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceServiceOfferings");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceOffering];

      return this.apiClient.callApi(
        '/sources/{id}/service_offerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceOfferings for Source
     * Returns an array of ServiceOffering objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServiceOffering>}
     */
    listSourceServiceOfferings(id) {
      return this.listSourceServiceOfferingsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServicePlans for Source
     * Returns an array of ServicePlan objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServicePlan>} and HTTP response
     */
    listSourceServicePlansWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceServicePlans");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServicePlan];

      return this.apiClient.callApi(
        '/sources/{id}/service_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServicePlans for Source
     * Returns an array of ServicePlan objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServicePlan>}
     */
    listSourceServicePlans(id) {
      return this.listSourceServicePlansWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Sources for SourceType
     * Returns an array of Source objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Source>} and HTTP response
     */
    listSourceTypeSourcesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceTypeSources");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Source];

      return this.apiClient.callApi(
        '/source_types/{id}/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Sources for SourceType
     * Returns an array of Source objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Source>}
     */
    listSourceTypeSources(id) {
      return this.listSourceTypeSourcesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List SourceTypes
     * Returns an array of SourceType objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SourceType>} and HTTP response
     */
    listSourceTypesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SourceType];

      return this.apiClient.callApi(
        '/source_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List SourceTypes
     * Returns an array of SourceType objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SourceType>}
     */
    listSourceTypes() {
      return this.listSourceTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Vms for Source
     * Returns an array of Vm objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vm>} and HTTP response
     */
    listSourceVmsWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceVms");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vm];

      return this.apiClient.callApi(
        '/sources/{id}/vms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Vms for Source
     * Returns an array of Vm objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vm>}
     */
    listSourceVms(id) {
      return this.listSourceVmsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List VolumeTypes for Source
     * Returns an array of VolumeType objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VolumeType>} and HTTP response
     */
    listSourceVolumeTypesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceVolumeTypes");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VolumeType];

      return this.apiClient.callApi(
        '/sources/{id}/volume_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List VolumeTypes for Source
     * Returns an array of VolumeType objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VolumeType>}
     */
    listSourceVolumeTypes(id) {
      return this.listSourceVolumeTypesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Volumes for Source
     * Returns an array of Volume objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Volume>} and HTTP response
     */
    listSourceVolumesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceVolumes");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Volume];

      return this.apiClient.callApi(
        '/sources/{id}/volumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Volumes for Source
     * Returns an array of Volume objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Volume>}
     */
    listSourceVolumes(id) {
      return this.listSourceVolumesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Sources
     * Returns an array of Source objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Source>} and HTTP response
     */
    listSourcesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Source];

      return this.apiClient.callApi(
        '/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Sources
     * Returns an array of Source objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Source>}
     */
    listSources() {
      return this.listSourcesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Tasks
     * Returns an array of Task objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Task>} and HTTP response
     */
    listTasksWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Task];

      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Tasks
     * Returns an array of Task objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Task>}
     */
    listTasks() {
      return this.listTasksWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List VolumeAttachments for Vm
     * Returns an array of VolumeAttachment objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VolumeAttachment>} and HTTP response
     */
    listVmVolumeAttachmentsWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listVmVolumeAttachments");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VolumeAttachment];

      return this.apiClient.callApi(
        '/vms/{id}/volume_attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List VolumeAttachments for Vm
     * Returns an array of VolumeAttachment objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VolumeAttachment>}
     */
    listVmVolumeAttachments(id) {
      return this.listVmVolumeAttachmentsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Volumes for Vm
     * Returns an array of Volume objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Volume>} and HTTP response
     */
    listVmVolumesWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listVmVolumes");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Volume];

      return this.apiClient.callApi(
        '/vms/{id}/volumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Volumes for Vm
     * Returns an array of Volume objects
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Volume>}
     */
    listVmVolumes(id) {
      return this.listVmVolumesWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Vms
     * Returns an array of Vm objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vm>} and HTTP response
     */
    listVmsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vm];

      return this.apiClient.callApi(
        '/vms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Vms
     * Returns an array of Vm objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vm>}
     */
    listVms() {
      return this.listVmsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List VolumeAttachments
     * Returns an array of VolumeAttachment objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VolumeAttachment>} and HTTP response
     */
    listVolumeAttachmentsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VolumeAttachment];

      return this.apiClient.callApi(
        '/volume_attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List VolumeAttachments
     * Returns an array of VolumeAttachment objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VolumeAttachment>}
     */
    listVolumeAttachments() {
      return this.listVolumeAttachmentsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List VolumeTypes
     * Returns an array of VolumeType objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VolumeType>} and HTTP response
     */
    listVolumeTypesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VolumeType];

      return this.apiClient.callApi(
        '/volume_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List VolumeTypes
     * Returns an array of VolumeType objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VolumeType>}
     */
    listVolumeTypes() {
      return this.listVolumeTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Volumes
     * Returns an array of Volume objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Volume>} and HTTP response
     */
    listVolumesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Volume];

      return this.apiClient.callApi(
        '/volumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Volumes
     * Returns an array of Volume objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Volume>}
     */
    listVolumes() {
      return this.listVolumesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Order an existing ServicePlan
     * Returns a Task id
     * @param {String} id ID of the resource
     * @param {module:model/OrderParameters} parameters Order parameters defining the service and provider control
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    orderServicePlanWithHttpInfo(id, parameters) {
      let postBody = parameters;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderServicePlan");
      }

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling orderServicePlan");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/service_plans/{id}/order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Order an existing ServicePlan
     * Returns a Task id
     * @param {String} id ID of the resource
     * @param {module:model/OrderParameters} parameters Order parameters defining the service and provider control
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    orderServicePlan(id, parameters) {
      return this.orderServicePlanWithHttpInfo(id, parameters)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace an existing Authentication
     * Replaces a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceAuthenticationWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling replaceAuthentication");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/authentications/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace an existing Authentication
     * Replaces a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceAuthentication(id) {
      return this.replaceAuthenticationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace an existing Endpoint
     * Replaces a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceEndpointWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling replaceEndpoint");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace an existing Endpoint
     * Replaces a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceEndpoint(id) {
      return this.replaceEndpointWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace an existing Source
     * Replaces a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    replaceSourceWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling replaceSource");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/sources/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace an existing Source
     * Replaces a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    replaceSource(id) {
      return this.replaceSourceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Authentication
     * Returns a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Authentication} and HTTP response
     */
    showAuthenticationWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showAuthentication");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Authentication;

      return this.apiClient.callApi(
        '/authentications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Authentication
     * Returns a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Authentication}
     */
    showAuthentication(id) {
      return this.showAuthenticationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Container
     * Returns a Container object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Container} and HTTP response
     */
    showContainerWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainer");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Container;

      return this.apiClient.callApi(
        '/containers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Container
     * Returns a Container object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Container}
     */
    showContainer(id) {
      return this.showContainerWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ContainerGroup
     * Returns a ContainerGroup object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerGroup} and HTTP response
     */
    showContainerGroupWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainerGroup");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerGroup;

      return this.apiClient.callApi(
        '/container_groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ContainerGroup
     * Returns a ContainerGroup object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerGroup}
     */
    showContainerGroup(id) {
      return this.showContainerGroupWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ContainerImage
     * Returns a ContainerImage object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerImage} and HTTP response
     */
    showContainerImageWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainerImage");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerImage;

      return this.apiClient.callApi(
        '/container_images/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ContainerImage
     * Returns a ContainerImage object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerImage}
     */
    showContainerImage(id) {
      return this.showContainerImageWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ContainerNode
     * Returns a ContainerNode object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerNode} and HTTP response
     */
    showContainerNodeWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainerNode");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerNode;

      return this.apiClient.callApi(
        '/container_nodes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ContainerNode
     * Returns a ContainerNode object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerNode}
     */
    showContainerNode(id) {
      return this.showContainerNodeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ContainerProject
     * Returns a ContainerProject object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerProject} and HTTP response
     */
    showContainerProjectWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainerProject");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerProject;

      return this.apiClient.callApi(
        '/container_projects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ContainerProject
     * Returns a ContainerProject object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerProject}
     */
    showContainerProject(id) {
      return this.showContainerProjectWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ContainerTemplate
     * Returns a ContainerTemplate object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerTemplate} and HTTP response
     */
    showContainerTemplateWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainerTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerTemplate;

      return this.apiClient.callApi(
        '/container_templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ContainerTemplate
     * Returns a ContainerTemplate object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerTemplate}
     */
    showContainerTemplate(id) {
      return this.showContainerTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Endpoint
     * Returns a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Endpoint} and HTTP response
     */
    showEndpointWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showEndpoint");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Endpoint;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Endpoint
     * Returns a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Endpoint}
     */
    showEndpoint(id) {
      return this.showEndpointWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Flavor
     * Returns a Flavor object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Flavor} and HTTP response
     */
    showFlavorWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showFlavor");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Flavor;

      return this.apiClient.callApi(
        '/flavors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Flavor
     * Returns a Flavor object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Flavor}
     */
    showFlavor(id) {
      return this.showFlavorWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing OrchestrationStack
     * Returns a OrchestrationStack object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrchestrationStack} and HTTP response
     */
    showOrchestrationStackWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showOrchestrationStack");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrchestrationStack;

      return this.apiClient.callApi(
        '/orchestration_stacks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing OrchestrationStack
     * Returns a OrchestrationStack object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrchestrationStack}
     */
    showOrchestrationStack(id) {
      return this.showOrchestrationStackWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ServiceInstance
     * Returns a ServiceInstance object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceInstance} and HTTP response
     */
    showServiceInstanceWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showServiceInstance");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInstance;

      return this.apiClient.callApi(
        '/service_instances/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ServiceInstance
     * Returns a ServiceInstance object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceInstance}
     */
    showServiceInstance(id) {
      return this.showServiceInstanceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ServiceOffering
     * Returns a ServiceOffering object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceOffering} and HTTP response
     */
    showServiceOfferingWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showServiceOffering");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceOffering;

      return this.apiClient.callApi(
        '/service_offerings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ServiceOffering
     * Returns a ServiceOffering object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceOffering}
     */
    showServiceOffering(id) {
      return this.showServiceOfferingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ServicePlan
     * Returns a ServicePlan object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServicePlan} and HTTP response
     */
    showServicePlanWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showServicePlan");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicePlan;

      return this.apiClient.callApi(
        '/service_plans/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ServicePlan
     * Returns a ServicePlan object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServicePlan}
     */
    showServicePlan(id) {
      return this.showServicePlanWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Source
     * Returns a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Source} and HTTP response
     */
    showSourceWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showSource");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Source;

      return this.apiClient.callApi(
        '/sources/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Source
     * Returns a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Source}
     */
    showSource(id) {
      return this.showSourceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing SourceType
     * Returns a SourceType object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceType} and HTTP response
     */
    showSourceTypeWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showSourceType");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceType;

      return this.apiClient.callApi(
        '/source_types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing SourceType
     * Returns a SourceType object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourceType}
     */
    showSourceType(id) {
      return this.showSourceTypeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Task
     * Returns a Task object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Task} and HTTP response
     */
    showTaskWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showTask");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Task;

      return this.apiClient.callApi(
        '/tasks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Task
     * Returns a Task object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Task}
     */
    showTask(id) {
      return this.showTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Vm
     * Returns a Vm object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    showVmWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showVm");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vms/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Vm
     * Returns a Vm object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    showVm(id) {
      return this.showVmWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Volume
     * Returns a Volume object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Volume} and HTTP response
     */
    showVolumeWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showVolume");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Volume;

      return this.apiClient.callApi(
        '/volumes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Volume
     * Returns a Volume object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Volume}
     */
    showVolume(id) {
      return this.showVolumeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing VolumeAttachment
     * Returns a VolumeAttachment object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumeAttachment} and HTTP response
     */
    showVolumeAttachmentWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showVolumeAttachment");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumeAttachment;

      return this.apiClient.callApi(
        '/volume_attachments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing VolumeAttachment
     * Returns a VolumeAttachment object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumeAttachment}
     */
    showVolumeAttachment(id) {
      return this.showVolumeAttachmentWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing VolumeType
     * Returns a VolumeType object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumeType} and HTTP response
     */
    showVolumeTypeWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showVolumeType");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumeType;

      return this.apiClient.callApi(
        '/volume_types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing VolumeType
     * Returns a VolumeType object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumeType}
     */
    showVolumeType(id) {
      return this.showVolumeTypeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing Authentication
     * Updates a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateAuthenticationWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAuthentication");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/authentications/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing Authentication
     * Updates a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateAuthentication(id) {
      return this.updateAuthenticationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing Endpoint
     * Updates a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateEndpointWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateEndpoint");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing Endpoint
     * Updates a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateEndpoint(id) {
      return this.updateEndpointWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing Source
     * Updates a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateSourceWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSource");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/sources/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing Source
     * Updates a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateSource(id) {
      return this.updateSourceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
