swagger: '2.0'
info:
  description: Topological Inventory
  version: 0.0.1
  title: Topological Inventory
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
securityDefinitions:
  UserSecurity:
    type: basic
security:
- UserSecurity: []
paths:
  "/authentications":
    get:
      summary: List Authentications
      operationId: listAuthentications
      description: Returns an array of Authentication objects
      produces:
      - application/json
      responses:
        200:
          description: Authentications array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Authentication"
    post:
      summary: Create a new Authentication
      operationId: createAuthentication
      description: Creates a Authentication object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        schema:
          "$ref": "#/parameters/ID"
      responses:
        201:
          description: Authentication info
          schema:
            type: object
            items:
              "$ref": "#/definitions/Authentication"
  "/authentications/{id}":
    get:
      summary: Show an existing Authentication
      operationId: showAuthentication
      description: Returns a Authentication object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Authentication info
          schema:
            "$ref": "#/definitions/Authentication"
        404:
          description: Not found
    patch:
      summary: Update an existing Authentication
      operationId: updateAuthentication
      description: Updates a Authentication object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Updated, no content
        404:
          description: Not found
    put:
      summary: Replace an existing Authentication
      operationId: replaceAuthentication
      description: Replaces a Authentication object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Updated, no content
        404:
          description: Not found
    delete:
      summary: Delete an existing Authentication
      operationId: deleteAuthentication
      description: Deletes a Authentication object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Authentication deleted
        404:
          description: Not found
  "/container_groups":
    get:
      summary: List ContainerGroups
      operationId: listContainerGroups
      description: Returns an array of ContainerGroup objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerGroups array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerGroup"
  "/container_groups/{id}":
    get:
      summary: Show an existing ContainerGroup
      operationId: showContainerGroup
      description: Returns a ContainerGroup object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ContainerGroup info
          schema:
            "$ref": "#/definitions/ContainerGroup"
        404:
          description: Not found
  "/container_groups/{id}/containers":
    get:
      summary: List Containers for ContainerGroup
      operationId: listContainerGroupContainers
      description: Returns an array of Container objects
      produces:
      - application/json
      responses:
        200:
          description: Containers array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Container"
      parameters:
      - "$ref": "#/parameters/ID"
  "/container_images":
    get:
      summary: List ContainerImages
      operationId: listContainerImages
      description: Returns an array of ContainerImage objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerImages array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerImage"
  "/container_images/{id}":
    get:
      summary: Show an existing ContainerImage
      operationId: showContainerImage
      description: Returns a ContainerImage object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ContainerImage info
          schema:
            "$ref": "#/definitions/ContainerImage"
        404:
          description: Not found
  "/container_nodes":
    get:
      summary: List ContainerNodes
      operationId: listContainerNodes
      description: Returns an array of ContainerNode objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerNodes array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerNode"
  "/container_nodes/{id}":
    get:
      summary: Show an existing ContainerNode
      operationId: showContainerNode
      description: Returns a ContainerNode object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ContainerNode info
          schema:
            "$ref": "#/definitions/ContainerNode"
        404:
          description: Not found
  "/container_nodes/{id}/container_groups":
    get:
      summary: List ContainerGroups for ContainerNode
      operationId: listContainerNodeContainerGroups
      description: Returns an array of ContainerGroup objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerGroups array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerGroup"
      parameters:
      - "$ref": "#/parameters/ID"
  "/container_projects":
    get:
      summary: List ContainerProjects
      operationId: listContainerProjects
      description: Returns an array of ContainerProject objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerProjects array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerProject"
  "/container_projects/{id}":
    get:
      summary: Show an existing ContainerProject
      operationId: showContainerProject
      description: Returns a ContainerProject object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ContainerProject info
          schema:
            "$ref": "#/definitions/ContainerProject"
        404:
          description: Not found
  "/container_projects/{id}/container_groups":
    get:
      summary: List ContainerGroups for ContainerProject
      operationId: listContainerProjectContainerGroups
      description: Returns an array of ContainerGroup objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerGroups array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerGroup"
      parameters:
      - "$ref": "#/parameters/ID"
  "/container_projects/{id}/container_templates":
    get:
      summary: List ContainerTemplates for ContainerProject
      operationId: listContainerProjectContainerTemplates
      description: Returns an array of ContainerTemplate objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerTemplates array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerTemplate"
      parameters:
      - "$ref": "#/parameters/ID"
  "/container_templates":
    get:
      summary: List ContainerTemplates
      operationId: listContainerTemplates
      description: Returns an array of ContainerTemplate objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerTemplates array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerTemplate"
  "/container_templates/{id}":
    get:
      summary: Show an existing ContainerTemplate
      operationId: showContainerTemplate
      description: Returns a ContainerTemplate object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ContainerTemplate info
          schema:
            "$ref": "#/definitions/ContainerTemplate"
        404:
          description: Not found
  "/containers":
    get:
      summary: List Containers
      operationId: listContainers
      description: Returns an array of Container objects
      produces:
      - application/json
      responses:
        200:
          description: Containers array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Container"
  "/containers/{id}":
    get:
      summary: Show an existing Container
      operationId: showContainer
      description: Returns a Container object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Container info
          schema:
            "$ref": "#/definitions/Container"
        404:
          description: Not found
  "/endpoints":
    get:
      summary: List Endpoints
      operationId: listEndpoints
      description: Returns an array of Endpoint objects
      produces:
      - application/json
      responses:
        200:
          description: Endpoints array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Endpoint"
    post:
      summary: Create a new Endpoint
      operationId: createEndpoint
      description: Creates a Endpoint object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        schema:
          "$ref": "#/parameters/ID"
      responses:
        201:
          description: Endpoint info
          schema:
            type: object
            items:
              "$ref": "#/definitions/Endpoint"
  "/endpoints/{id}":
    get:
      summary: Show an existing Endpoint
      operationId: showEndpoint
      description: Returns a Endpoint object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Endpoint info
          schema:
            "$ref": "#/definitions/Endpoint"
        404:
          description: Not found
    patch:
      summary: Update an existing Endpoint
      operationId: updateEndpoint
      description: Updates a Endpoint object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Updated, no content
        404:
          description: Not found
    put:
      summary: Replace an existing Endpoint
      operationId: replaceEndpoint
      description: Replaces a Endpoint object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Updated, no content
        404:
          description: Not found
    delete:
      summary: Delete an existing Endpoint
      operationId: deleteEndpoint
      description: Deletes a Endpoint object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Endpoint deleted
        404:
          description: Not found
  "/flavors":
    get:
      summary: List Flavors
      operationId: listFlavors
      description: Returns an array of Flavor objects
      produces:
      - application/json
      responses:
        200:
          description: Flavors array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Flavor"
  "/flavors/{id}":
    get:
      summary: Show an existing Flavor
      operationId: showFlavor
      description: Returns a Flavor object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Flavor info
          schema:
            "$ref": "#/definitions/Flavor"
        404:
          description: Not found
  "/orchestration_stacks":
    get:
      summary: List OrchestrationStacks
      operationId: listOrchestrationStacks
      description: Returns an array of OrchestrationStack objects
      produces:
      - application/json
      responses:
        200:
          description: OrchestrationStacks array
          schema:
            type: array
            items:
              "$ref": "#/definitions/OrchestrationStack"
  "/orchestration_stacks/{id}":
    get:
      summary: Show an existing OrchestrationStack
      operationId: showOrchestrationStack
      description: Returns a OrchestrationStack object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: OrchestrationStack info
          schema:
            "$ref": "#/definitions/OrchestrationStack"
        404:
          description: Not found
  "/service_instances":
    get:
      summary: List ServiceInstances
      operationId: listServiceInstances
      description: Returns an array of ServiceInstance objects
      produces:
      - application/json
      responses:
        200:
          description: ServiceInstances array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ServiceInstance"
  "/service_instances/{id}":
    get:
      summary: Show an existing ServiceInstance
      operationId: showServiceInstance
      description: Returns a ServiceInstance object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ServiceInstance info
          schema:
            "$ref": "#/definitions/ServiceInstance"
        404:
          description: Not found
  "/service_offerings":
    get:
      summary: List ServiceOfferings
      operationId: listServiceOfferings
      description: Returns an array of ServiceOffering objects
      produces:
      - application/json
      responses:
        200:
          description: ServiceOfferings array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ServiceOffering"
  "/service_offerings/{id}":
    get:
      summary: Show an existing ServiceOffering
      operationId: showServiceOffering
      description: Returns a ServiceOffering object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ServiceOffering info
          schema:
            "$ref": "#/definitions/ServiceOffering"
        404:
          description: Not found
  "/service_offerings/{id}/service_instances":
    get:
      summary: List ServiceInstances for ServiceOffering
      operationId: listServiceOfferingServiceInstances
      description: Returns an array of ServiceInstance objects
      produces:
      - application/json
      responses:
        200:
          description: ServiceInstances array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ServiceInstance"
      parameters:
      - "$ref": "#/parameters/ID"
  "/service_offerings/{id}/service_plans":
    get:
      summary: List ServicePlans for ServiceOffering
      operationId: listServiceOfferingServicePlans
      description: Returns an array of ServicePlan objects
      produces:
      - application/json
      responses:
        200:
          description: ServicePlans array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ServicePlan"
      parameters:
      - "$ref": "#/parameters/ID"
  "/service_plans":
    get:
      summary: List ServicePlans
      operationId: listServicePlans
      description: Returns an array of ServicePlan objects
      produces:
      - application/json
      responses:
        200:
          description: ServicePlans array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ServicePlan"
  "/service_plans/{id}":
    get:
      summary: Show an existing ServicePlan
      operationId: showServicePlan
      description: Returns a ServicePlan object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ServicePlan info
          schema:
            "$ref": "#/definitions/ServicePlan"
        404:
          description: Not found
  "/service_plans/{id}/order":
    post:
      summary: Order an existing ServicePlan
      operationId: orderServicePlan
      description: Returns a Task id
      consumes:
      - application/json
      parameters:
      - "$ref": '#/parameters/ID'
      - name: parameters
        in: body
        description: Order parameters defining the service and provider control
        required: true
        schema:
          $ref: '#/definitions/OrderParameters'
      responses:
        200:
          description: Returns a task ID for the order
          schema:
            type: object
            properties:
              task_id:
                type: string
        400:
          description: BadRequest
  "/service_plans/{id}/service_instances":
    get:
      summary: List ServiceInstances for ServicePlan
      operationId: listServicePlanServiceInstances
      description: Returns an array of ServiceInstance objects
      produces:
      - application/json
      responses:
        200:
          description: ServiceInstances array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ServiceInstance"
      parameters:
      - "$ref": "#/parameters/ID"
  "/source_types":
    get:
      summary: List SourceTypes
      operationId: listSourceTypes
      description: Returns an array of SourceType objects
      produces:
      - application/json
      responses:
        200:
          description: SourceTypes array
          schema:
            type: array
            items:
              "$ref": "#/definitions/SourceType"
    post:
      summary: Create a new SourceType
      operationId: createSourceType
      description: Creates a SourceType object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        schema:
          "$ref": "#/parameters/ID"
      responses:
        201:
          description: SourceType info
          schema:
            type: object
            items:
              "$ref": "#/definitions/SourceType"
  "/source_types/{id}":
    get:
      summary: Show an existing SourceType
      operationId: showSourceType
      description: Returns a SourceType object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: SourceType info
          schema:
            "$ref": "#/definitions/SourceType"
        404:
          description: Not found
  "/source_types/{id}/sources":
    get:
      summary: List Sources for SourceType
      operationId: listSourceTypeSources
      description: Returns an array of Source objects
      produces:
      - application/json
      responses:
        200:
          description: Sources array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Source"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources":
    get:
      summary: List Sources
      operationId: listSources
      description: Returns an array of Source objects
      produces:
      - application/json
      responses:
        200:
          description: Sources array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Source"
    post:
      summary: Create a new Source
      operationId: createSource
      description: Creates a Source object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        schema:
          "$ref": "#/parameters/ID"
      responses:
        201:
          description: Source info
          schema:
            type: object
            items:
              "$ref": "#/definitions/Source"
  "/sources/{id}":
    get:
      summary: Show an existing Source
      operationId: showSource
      description: Returns a Source object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Source info
          schema:
            "$ref": "#/definitions/Source"
        404:
          description: Not found
    patch:
      summary: Update an existing Source
      operationId: updateSource
      description: Updates a Source object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Updated, no content
        404:
          description: Not found
    put:
      summary: Replace an existing Source
      operationId: replaceSource
      description: Replaces a Source object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Updated, no content
        404:
          description: Not found
    delete:
      summary: Delete an existing Source
      operationId: deleteSource
      description: Deletes a Source object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Source deleted
        404:
          description: Not found
  "/sources/{id}/container_groups":
    get:
      summary: List ContainerGroups for Source
      operationId: listSourceContainerGroups
      description: Returns an array of ContainerGroup objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerGroups array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerGroup"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/container_images":
    get:
      summary: List ContainerImages for Source
      operationId: listSourceContainerImages
      description: Returns an array of ContainerImage objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerImages array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerImage"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/container_nodes":
    get:
      summary: List ContainerNodes for Source
      operationId: listSourceContainerNodes
      description: Returns an array of ContainerNode objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerNodes array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerNode"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/container_projects":
    get:
      summary: List ContainerProjects for Source
      operationId: listSourceContainerProjects
      description: Returns an array of ContainerProject objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerProjects array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerProject"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/container_templates":
    get:
      summary: List ContainerTemplates for Source
      operationId: listSourceContainerTemplates
      description: Returns an array of ContainerTemplate objects
      produces:
      - application/json
      responses:
        200:
          description: ContainerTemplates array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ContainerTemplate"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/containers":
    get:
      summary: List Containers for Source
      operationId: listSourceContainers
      description: Returns an array of Container objects
      produces:
      - application/json
      responses:
        200:
          description: Containers array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Container"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/endpoints":
    get:
      summary: List Endpoints for Source
      operationId: listSourceEndpoints
      description: Returns an array of Endpoint objects
      produces:
      - application/json
      responses:
        200:
          description: Endpoints array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Endpoint"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/orchestration_stacks":
    get:
      summary: List OrchestrationStacks for Source
      operationId: listSourceOrchestrationStacks
      description: Returns an array of OrchestrationStack objects
      produces:
      - application/json
      responses:
        200:
          description: OrchestrationStacks array
          schema:
            type: array
            items:
              "$ref": "#/definitions/OrchestrationStack"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/service_instances":
    get:
      summary: List ServiceInstances for Source
      operationId: listSourceServiceInstances
      description: Returns an array of ServiceInstance objects
      produces:
      - application/json
      responses:
        200:
          description: ServiceInstances array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ServiceInstance"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/service_offerings":
    get:
      summary: List ServiceOfferings for Source
      operationId: listSourceServiceOfferings
      description: Returns an array of ServiceOffering objects
      produces:
      - application/json
      responses:
        200:
          description: ServiceOfferings array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ServiceOffering"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/service_plans":
    get:
      summary: List ServicePlans for Source
      operationId: listSourceServicePlans
      description: Returns an array of ServicePlan objects
      produces:
      - application/json
      responses:
        200:
          description: ServicePlans array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ServicePlan"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/vms":
    get:
      summary: List Vms for Source
      operationId: listSourceVms
      description: Returns an array of Vm objects
      produces:
      - application/json
      responses:
        200:
          description: Vms array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Vm"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/volume_types":
    get:
      summary: List VolumeTypes for Source
      operationId: listSourceVolumeTypes
      description: Returns an array of VolumeType objects
      produces:
      - application/json
      responses:
        200:
          description: VolumeTypes array
          schema:
            type: array
            items:
              "$ref": "#/definitions/VolumeType"
      parameters:
      - "$ref": "#/parameters/ID"
  "/sources/{id}/volumes":
    get:
      summary: List Volumes for Source
      operationId: listSourceVolumes
      description: Returns an array of Volume objects
      produces:
      - application/json
      responses:
        200:
          description: Volumes array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Volume"
      parameters:
      - "$ref": "#/parameters/ID"
  "/tasks":
    get:
      summary: List Tasks
      operationId: listTasks
      description: Returns an array of Task objects
      produces:
      - application/json
      responses:
        200:
          description: Tasks array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Task"
  "/tasks/{id}":
    get:
      summary: Show an existing Task
      operationId: showTask
      description: Returns a Task object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Task info
          schema:
            "$ref": "#/definitions/Task"
        404:
          description: Not found
  "/vms":
    get:
      summary: List Vms
      operationId: listVms
      description: Returns an array of Vm objects
      produces:
      - application/json
      responses:
        200:
          description: Vms array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Vm"
  "/vms/{id}":
    get:
      summary: Show an existing Vm
      operationId: showVm
      description: Returns a Vm object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Vm info
          schema:
            "$ref": "#/definitions/Vm"
        404:
          description: Not found
  "/vms/{id}/volume_attachments":
    get:
      summary: List VolumeAttachments for Vm
      operationId: listVmVolumeAttachments
      description: Returns an array of VolumeAttachment objects
      produces:
      - application/json
      responses:
        200:
          description: VolumeAttachments array
          schema:
            type: array
            items:
              "$ref": "#/definitions/VolumeAttachment"
      parameters:
      - "$ref": "#/parameters/ID"
  "/vms/{id}/volumes":
    get:
      summary: List Volumes for Vm
      operationId: listVmVolumes
      description: Returns an array of Volume objects
      produces:
      - application/json
      responses:
        200:
          description: Volumes array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Volume"
      parameters:
      - "$ref": "#/parameters/ID"
  "/volume_attachments":
    get:
      summary: List VolumeAttachments
      operationId: listVolumeAttachments
      description: Returns an array of VolumeAttachment objects
      produces:
      - application/json
      responses:
        200:
          description: VolumeAttachments array
          schema:
            type: array
            items:
              "$ref": "#/definitions/VolumeAttachment"
  "/volume_attachments/{id}":
    get:
      summary: Show an existing VolumeAttachment
      operationId: showVolumeAttachment
      description: Returns a VolumeAttachment object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: VolumeAttachment info
          schema:
            "$ref": "#/definitions/VolumeAttachment"
        404:
          description: Not found
  "/volume_types":
    get:
      summary: List VolumeTypes
      operationId: listVolumeTypes
      description: Returns an array of VolumeType objects
      produces:
      - application/json
      responses:
        200:
          description: VolumeTypes array
          schema:
            type: array
            items:
              "$ref": "#/definitions/VolumeType"
  "/volume_types/{id}":
    get:
      summary: Show an existing VolumeType
      operationId: showVolumeType
      description: Returns a VolumeType object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: VolumeType info
          schema:
            "$ref": "#/definitions/VolumeType"
        404:
          description: Not found
  "/volumes":
    get:
      summary: List Volumes
      operationId: listVolumes
      description: Returns an array of Volume objects
      produces:
      - application/json
      responses:
        200:
          description: Volumes array
          schema:
            type: array
            items:
              "$ref": "#/definitions/Volume"
  "/volumes/{id}":
    get:
      summary: Show an existing Volume
      operationId: showVolume
      description: Returns a Volume object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Volume info
          schema:
            "$ref": "#/definitions/Volume"
        404:
          description: Not found
parameters:
  ID:
    name: id
    in: path
    description: ID of the resource
    required: true
    type: string
    pattern: "/^\\d+$/"
definitions:
  Authentication:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      authtype:
        type: string
        example: openshift_default
      name:
        type: string
        example: OpenShift default
      resource_type:
        type: string
        example: Endpoint
      resource_id:
        type: string
        format: uuid
      status:
        type: string
        example: valid
      status_details:
        type: string
      userid:
        type: string
        example: user@example.com
  Container:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      name:
        type: string
        readOnly: true
        example: docker-build
      cpu_limit:
        type: number
        format: double
        readOnly: true
      cpu_request:
        type: number
        format: double
        readOnly: true
      memory_limit:
        type: integer
        readOnly: true
      memory_request:
        type: integer
        readOnly: true
      container_group_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      container_image_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
  ContainerGroup:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Group
        title: Name
        readOnly: true
      ipaddress:
        type: string
        example: 192.0.2.1
        title: IP Address
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      container_node_id:
        type: string
        readOnly: true
        format: uuid
      container_project_id:
        type: string
        readOnly: true
        format: uuid
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  ContainerImage:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      name:
        type: string
        readOnly: true
        example: openshift3/postgresql-92-rhel7
      tag:
        type: string
        readOnly: true
        example: latest
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
  ContainerNode:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Group
        title: Name
        readOnly: true
      cpus:
        type: integer
        example: 4
        readOnly: true
      lives_on_type:
        type: string
        readOnly: true
        example: Vm
      lives_on_id:
        type: "#/parameters/ID"
        readOnly: true
      memory:
        type: integer
        example: 4294967296
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  ContainerProject:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Project
        title: Name
      display_name:
        type: string
        example: This is a sample display name for a project
        title: Display Name
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  ContainerTemplate:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Project
        title: Name
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      container_project_id:
        type: string
        readOnly: true
        format: uuid
  Endpoint:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      default:
        type: boolean
      host:
        type: string
        example: www.example.com
        description: URI host component
      path:
        type: string
        example: "/api/v1"
        description: URI path component
      port:
        type: integer
        minimum: 0
        maximum: 65534
        example: 80
        description: URI port component
      role:
        type: string
        example: default
      scheme:
        type: string
        example: https
        description: URI scheme component
      source_id:
        type: string
        example: '1234567890'
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  Flavor:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_ref:
        type: string
        readOnly: true
        format: uuid
      disk_size:
        type: integer
        readOnly: true
        example: 17179869184
        description: Size of the default disks in bytes
      disk_count:
        type: integer
        readOnly: true
        example: 2
        description: The number of default disks
      memory:
        type: integer
        readOnly: true
        example: 17179869184
        description: Amount of RAM in bytes
      cpus:
        type: integer
        readOnly: true
        example: 2
        description: Number of CPUs
  OrchestrationStack:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample OrchestrationStack
        title: Name
        readOnly: true
      description:
        type: string
        description: Description of the OrchestrationStack
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  OrderParameters:
    type: object
    properties:
      service_parameters:
        type: object
        description: JSON object with provisioning parameters
      provider_control_parameters:
        type: object
        description: >-
          The provider specific parameters needed to provision this service.
          This might include namespaces, special keys
  ServiceInstance:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample ServiceInstance
        title: Name
      extra:
        type: string
        description: Extra information about this object in JSON format
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      service_offering_id:
        type: string
        readOnly: true
        format: uuid
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  ServiceOffering:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Provider
        title: Name
      description:
        type: string
        example: This is a sample description for a provider
        title: Description
      source_ref:
        type: string
        example: object-12345_67890
        title: Source reference
        description: The native reference used by the Source to refer to this object
      extra:
        type: string
        description: Extra information about this object in JSON format
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  ServicePlan:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Provider
        title: Name
      description:
        type: string
        example: This is a sample description for a provider
        title: Description
      extra:
        type: string
        description: Extra information about this object in JSON format
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      service_offering_id:
        type: string
        readOnly: true
        format: uuid
      create_json_schema:
        type: object
        readOnly: true
      update_json_schema:
        type: object
        readOnly: true
  Source:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      source_type_id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Provider
        title: Name
      uid:
        type: string
        readOnly: true
        title: Unique ID of the inventory source installation
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  SourceType:
    type: object
    required:
    - name
    - product_name
    - vendor
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: openshift
      product_name:
        type: string
        example: OpenShift
      vendor:
        type: string
        example: Red Hat
      schema:
        type: object
  Task:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Order Service Plan
        title: Name
      status:
        type: string
        example: Error
        title: Status
      state:
        type: string
        example: Running
        title: State
      context:
        type: object
        example: Extra information about this task, e.g. new inventory items created by this task
        title: Context
      completed_at:
        type: string
        format: date-time
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  Vm:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Vm
        title: Name
        readOnly: true
      description:
        type: string
        description: Description of the Vm
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      uid_ems:
        type: string
        readOnly: true
        description: Cross-Source Unique Reference
      hostname:
        type: string
        readOnly: true
        example: localhost.localdomain
      power_state:
        type: string
        readOnly: true
        example: running
      cpus:
        type: integer
        readOnly: true
        example: 2
        description: Total number of CPUs
      memory:
        type: integer
        readOnly: true
        example: 17179869184
        description: Total RAM in bytes
      orchestration_stack_id:
        type: string
        readOnly: true
        format: uuid
      flavor_id:
        type: string
        readOnly: true
        format: uuid
  Volume:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_region_id:
        type: string
        readOnly: true
        format: uuid
      volume_type_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_ref:
        type: string
        readOnly: true
      name:
        type: string
        example: vol-00627bf31217a7bc0
      state:
        type: string
        example: in-use
      size:
        type: integer
        example: 8589934592
        description: Size of the volume in bytes
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
  VolumeAttachment:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      vm_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      volume_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      device:
        type: string
        readOnly: true
        example: "/dev/xvda"
      state:
        type: string
        readOnly: true
        example: attached
  VolumeType:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_ref:
        type: string
      name:
        type: string
        example: standard
      description:
        type: string
        example: Magnetic
host: virtserver.swaggerhub.com
schemes:
- https
- http
basePath: "/r/insights/platform/topological-inventory/v0.0"
